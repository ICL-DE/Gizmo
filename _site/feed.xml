<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://starignus.github.io/PythonPractise//PythonPractise//feed.xml" rel="self" type="application/atom+xml" /><link href="https://starignus.github.io/PythonPractise//PythonPractise//" rel="alternate" type="text/html" /><updated>2017-01-14T11:30:13+00:00</updated><id>https://starignus.github.io/PythonPractise//PythonPractise//</id><title>Gizmo Workshop</title><subtitle>Python / Raspberry Pi Learning!&quot;</subtitle><entry><title>Adafruit DC Motor HAT for Raspberry Pi</title><link href="https://starignus.github.io/PythonPractise//PythonPractise//2016/10/19/RPi_GPIO_motors/" rel="alternate" type="text/html" title="Adafruit DC Motor HAT for Raspberry Pi" /><published>2016-10-19T15:00:00+01:00</published><updated>2016-10-19T15:00:00+01:00</updated><id>https://starignus.github.io/PythonPractise//PythonPractise//2016/10/19/RPi_GPIO_motors</id><content type="html" xml:base="https://starignus.github.io/PythonPractise//PythonPractise//2016/10/19/RPi_GPIO_motors/">&lt;h1 id=&quot;raspberry-pi-gpio-part-2-adafruit-dc-motor-hat-for-raspberry-pi&quot;&gt;Raspberry Pi GPIO-Part 2: Adafruit DC Motor HAT for Raspberry Pi&lt;/h1&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;DC+Stepper Motor HAT from Adafruit&lt;/strong&gt; is a perfect add-on for any motor project as it can drive up to 4 DC or 2 Stepper motors with full PWM speed control. However, the Raspberry Pi does not have a lot of PWM pins, we use a fully-dedicated PWM driver chip onboard to both control motor direction and speed. This chip handles all the motor and speed controls over I2C. Only two GPIO pins (SDA &amp;amp; SCL) are required to drive the multiple motors, and since it is I2C you can also connect any other I2C devices or HATs to the same pins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href=&quot;(https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c)&quot;&gt;I2C&lt;/a&gt; is a very commonly used standard designed to allow one chip to talk to another. So, since the Raspberry Pi can talk I2C we can connect it to a variety of I2C capable chips and modules.&lt;/p&gt;

&lt;h5 id=&quot;features&quot;&gt;Features:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;4 H-Bridges: TB6612 MOSFET chipset provides 1.2A per bridge (3A brief peak) with thermal shutdown protection, internal kickback protection diodes. Can run motors on 4.5VDC to 13.5VDC.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Up to 4 bi-directional DC motors&lt;/strong&gt; with individual 8-bit speed selection (so, about 0.5% resolution).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Up to 2 stepper motors&lt;/strong&gt; (unipolar or bipolar) with single coil, double coil, interleaved or micro-stepping.&lt;/li&gt;
  &lt;li&gt;Big terminal block connectors to easily hook up wires (18-26AWG) and power.&lt;/li&gt;
  &lt;li&gt;Polarity protected 2-pin terminal block and jumper to connect external 5-12VDC power.&lt;/li&gt;
  &lt;li&gt;Install the easy-to-use Python library.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;assembly&quot;&gt;Assembly&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Motor HAT&lt;/strong&gt; comes with an assembled and tested HAT, terminal blocks, and 2x20 plain header. Some soldering is required to assemble the headers on. Here we leave a link with a &lt;a href=&quot;https://learn.adafruit.com/adafruit-dc-and-stepper-motor-hat-for-raspberry-pi/assembly&quot;&gt;step-by-step&lt;/a&gt; guide of how to solder the headers and a video to show you &lt;a href=&quot;https://www.youtube.com/watch?v=QKbJxytERvg&quot;&gt;tips on soldering&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/raspberry_pi_2348_top_ORIG.jpg&quot; alt=&quot;rpi&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the motor HAT is assembled, we place it on top so that the short pins of the 2x20 header line up with the pads on the HAT.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/raspberry_pi_place.jpg&quot; alt=&quot;rpi-hat&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;powering-motors&quot;&gt;Powering Motors&lt;/h2&gt;

&lt;p&gt;Note the HAT does not power the Raspberry Pi, and we strongly recommend having two separate power supplies - one for the RPi and one for the motors, as motors can put a lot of noise onto a power supply and it could cause stability problems.&lt;/p&gt;

&lt;h5 id=&quot;voltage-requirements&quot;&gt;Voltage requirements&lt;/h5&gt;

&lt;p&gt;The motor controllers on this HAT are designed to run from &lt;strong&gt;5V to 12V&lt;/strong&gt;. Therefore, the first important thing is to verify the voltage specifications for the motor. Some small hobby motors are only intended to run at 1.5V (&lt;strong&gt;MOST 1.5-3V MOTORS WILL NOT WORK or will be damaged by 5V power&lt;/strong&gt;), but its just as common to have 6-12V motors.&lt;/p&gt;

&lt;h5 id=&quot;current-requirements&quot;&gt;Current requirements&lt;/h5&gt;

&lt;p&gt;The motor driver chips that come with the kit are designed to provide up to &lt;strong&gt;1.2 A per motor&lt;/strong&gt;, with 3A peak current. Note that once you head towards 2A you will probably want to put a heat-sink on the motor driver, otherwise you will get thermal failure, possibly burning out the chip.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Am important thing you can not run motors off of a 9V battery so don’t waste your time/batteries!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Therefore, you can use a 9V 1A, 12V 1A, or 12V 5A DC regulated switching power adapter. In case you want to make it portable, you can use a big Lead Acid or multiple-AA NiMH battery pack of 4 to 8 batteries to vary the voltage from about 6V to 12V as your motors require.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/raspberry_pi_powerplug.jpg&quot; alt=&quot;hat-power&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;connecting-dc-motors&quot;&gt;Connecting DC Motors&lt;/h2&gt;

&lt;p&gt;To connect a motor, simply solder two wires to the terminals and then connect them to either the &lt;strong&gt;M1, M2, M3&lt;/strong&gt;, or &lt;strong&gt;M4&lt;/strong&gt;. If your motor is running ‘backwards’ from the way you like, just swap the wires in the terminal block. For this demo, please connect it to &lt;strong&gt;M3&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/raspberry_pi_dcmotor.jpg&quot; alt=&quot;hat-power&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;installing-software&quot;&gt;Installing Software&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;We can download the Python library to control DC and stepper motors. Before you start, we need to install the &lt;strong&gt;python smbus library&lt;/strong&gt; as well as ‘git’. For the latter, execute the following command:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install python-smbus
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Now, we download the code as:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;code
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/adafruit/Adafruit-Motor-HAT-Python-Library.git
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Adafruit-Motor-HAT-Python-Library
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Before going further to the next step, we need to configuring the I2C if has not been done yet. Run:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo raspi-config
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and follow the prompts to install I2C support for the ARM core and linux kernel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/I2C_1.png&quot; alt=&quot;I2C_1&quot; style=&quot;width: 650px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/I2C_2.png&quot; alt=&quot;I2C_2&quot; style=&quot;width: 650px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/I2C_3.png&quot; alt=&quot;I2C_3&quot; style=&quot;width: 650px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/I2C_4.png&quot; alt=&quot;I2C_4&quot; style=&quot;width: 650px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/I2C_5.png&quot; alt=&quot;I2C_5&quot; style=&quot;width: 650px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Then reboot!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Now you can get started with testing to  watch your motor spin back and forth. First access to:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Adafruit-Motor-HAT-Python/examples
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;nano DCTest.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Here you will see the code which shows you everything the MotorHAT library can do and how to do it.&lt;/p&gt;

&lt;h4 id=&quot;dc-motor-control&quot;&gt;DC motor control&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Start with importing at least these libraries:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Adafruit_MotorHAT&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adafruit_MotorHAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adafruit_DCMotor&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;atexit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;The MotorHAT library contains a few different classes, one is the &lt;strong&gt;MotorHAT class&lt;/strong&gt; itself which is the main PWM controller. You always need to create an object, and set the address (or frequency). By default the address is 0x60. We can change this address, but for now we are not going to do it.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# create a default object, no changes to I2C address or frequency&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Adafruit_MotorHAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;The PWM driver is ‘free running’ - that means that even if the python code or Pi linux kernel crashes, the PWM driver will still continue to work. But it means that the motors &lt;strong&gt;DO NOT STOP&lt;/strong&gt; when the python code quits
For that reason, we strongly recommend this ‘at exit’ code when using DC motors, it will do its best to shut down all the motors.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# recommended for auto-disabling motors on shutdown!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;turnOffMotors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adafruit_MotorHAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adafruit_MotorHAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adafruit_MotorHAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adafruit_MotorHAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;atexit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;turnOffMotors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;creating-the-dc-motor-object&quot;&gt;Creating the DC motor object&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Now that you have the motor HAT object, note that each HAT can control up to 4 motors. That means you can have multiple HATs running.
To create the actual DC motor object, you can request it from the MotorHAT object you created above with &lt;code class=&quot;highlighter-rouge&quot;&gt;getMotor(num)&lt;/code&gt; with a value between 1 and 4, for the terminal number that the motor is attached to&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# In this case is M3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myMotor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getMotor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;DC motors are simple beasts, you can basically only set the speed and direction.&lt;/p&gt;

&lt;h4 id=&quot;setting-dc-motor-speed&quot;&gt;Setting DC Motor Speed&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;To set the speed, call &lt;code class=&quot;highlighter-rouge&quot;&gt;setSpeed(speed)&lt;/code&gt; where speed varies from 0 (off) to 255 (Maximum). This is the PWM duty cycle of the motor.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# set the speed to start, from 0 (off) to 255 (max speed)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;myMotor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;setting-dc-motor-direction&quot;&gt;Setting DC Motor Direction&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;To set the direction, we use the funciton &lt;code class=&quot;highlighter-rouge&quot;&gt;run(direction)&lt;/code&gt; where direction is a constant from one of the following:
7.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Adafruit_MotorHAT.FORWARD&lt;/code&gt; - DC motor spins forward.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Adafruit_MotorHAT.BACKWARD&lt;/code&gt; - DC motor spins backward.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Adafruit_MotorHAT.RELEASE&lt;/code&gt; - DC motor is ‘off’, not spinning but will also not hold its place.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Forward! &quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;myMotor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adafruit_MotorHAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FORWARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Speed up...&quot;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# This will loop from 0-254&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;myMotor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# It will stop 10 ms&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Slow down...&quot;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# This will loop from 244-0&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;myMotor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Backward! &quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;myMotor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adafruit_MotorHAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BACKWARD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Speed up...&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;myMotor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Slow down...&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reversed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;myMotor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setSpeed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Release&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;myMotor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Adafruit_MotorHAT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Reference[&lt;a href=&quot;https://learn.adafruit.com/adafruit-dc-and-stepper-motor-hat-for-raspberry-pi/overview&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://learn.adafruit.com/adafruits-raspberry-pi-lesson-4-gpio-setup/configuring-i2c#installing-kernel-support-manually&quot;&gt;2&lt;/a&gt;]&lt;/p&gt;</content><author><name>Ariadna Blanca Romero &amp; Jing Sheng Pang</name></author><summary>Raspberry Pi GPIO-Part 2: Adafruit DC Motor HAT for Raspberry Pi</summary></entry><entry><title>Raspberry Pi GPIO</title><link href="https://starignus.github.io/PythonPractise//PythonPractise//2016/10/19/Rpi_GPIO/" rel="alternate" type="text/html" title="Raspberry Pi GPIO" /><published>2016-10-19T14:00:00+01:00</published><updated>2016-10-19T14:00:00+01:00</updated><id>https://starignus.github.io/PythonPractise//PythonPractise//2016/10/19/Rpi_GPIO</id><content type="html" xml:base="https://starignus.github.io/PythonPractise//PythonPractise//2016/10/19/Rpi_GPIO/">&lt;h1 id=&quot;raspberry-pi-gpio-part-1&quot;&gt;Raspberry Pi GPIO-Part 1&lt;/h1&gt;

&lt;p&gt;Your Raspberry Pi is more than just a small computer, it is a hardware prototyping tool! The RPi has &lt;strong&gt;bi-directional I/O pins&lt;/strong&gt;, which you can use to drive LEDs, spin motors, or read button presses. To drive the RPi’s I/O lines requires a bit or programming. You can use a &lt;a href=&quot;http://elinux.org/RPi_Low-level_peripherals#GPIO_Code_examples&quot;&gt;variety of programing languages&lt;/a&gt;, but we decided to use a really solid, easy tools for driving I/O: &lt;strong&gt;Python&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;material-needed&quot;&gt;Material needed&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Raspberry Pi 3 B&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sparkfun.com/products/12002?_ga=1.251311686.1915117394.1476705504&quot;&gt;Breadboard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sparkfun.com/products/12794&quot;&gt;Jumper Wires(M/F)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sparkfun.com/products/9190?_ga=1.213562324.1915117394.1476705504&quot;&gt;Momentary Pushbutton Switch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sparkfun.com/products/11507?_ga=1.213562324.1915117394.1476705504&quot;&gt;2 Resistors&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.sparkfun.com/products/9590?_ga=1.213548756.1915117394.1476705504&quot;&gt;2 LEDs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gpio-pinout&quot;&gt;GPIO Pinout&lt;/h2&gt;

&lt;p&gt;Raspberry has its GPIO over a standard male header on the board. From the first models to the latest, the header has expanded from 26 pins to 40 pins while maintaining the original pinout.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/rpi_old_new_pin.jpg&quot; alt=&quot;rpi&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are (at least) two, different numbering schemes you may encounter when referencing &lt;strong&gt;Pi pin numbers&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Broadcom chip-specific&lt;/strong&gt; pin numbers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;P1 physical&lt;/strong&gt; pin numbers.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can use use either number-system, but when you are programming how to use the pins, it require that you declare which scheme you are using at the very beginning of your program. We will see this later.&lt;/p&gt;

&lt;p&gt;The next table shows all 40 pins on the P1 header, including any special function they may have, and their dual numbers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/header_pinout.jpg&quot; alt=&quot;pin&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the next table we show other numbering system  along with the ones we showed above: Pi pin header numbers and element14 given names: wiringPi numbers, Python numbers, and related silkscreen on the wedge. The Broadcom pin numbers in the table are relate to RPi Model 2 and later only.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Pi_pin_header_numbers.png&quot; alt=&quot;pin&quot; style=&quot;width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This table shows that the RPi not only gives you access to the bi-directional I/O pins, but also &lt;a href=&quot;https://learn.sparkfun.com/tutorials/serial-communication&quot;&gt;Serial (UART)&lt;/a&gt;, &lt;a href=&quot;https://learn.sparkfun.com/tutorials/i2c&quot;&gt;I2C&lt;/a&gt;, &lt;a href=&quot;https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi&quot;&gt;SPI&lt;/a&gt;, and even some &lt;a href=&quot;https://learn.sparkfun.com/tutorials/pulse-width-modulation&quot;&gt;PWM&lt;/a&gt; (“analog output”).&lt;/p&gt;

&lt;h3 id=&quot;analog-vs-digital&quot;&gt;Analog vs. Digital&lt;/h3&gt;

&lt;p&gt;Before starting with our practise, we will revise the difference between &lt;strong&gt;analog&lt;/strong&gt; and &lt;strong&gt;digital&lt;/strong&gt; signals. Both are used to transmit information, usually through &lt;strong&gt;electric signals&lt;/strong&gt;. In both these technologies, the information, such as any audio or video, is transformed into electric signals. The &lt;strong&gt;difference between analog and digital&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;strong&gt;analog technology&lt;/strong&gt;, information is translated into electric pulses of varying amplitude.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In &lt;strong&gt;digital technology&lt;/strong&gt;, translation of information is into binary format (zero or one) where each bit is representative of two distinct amplitudes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/analog_digital.png&quot; alt=&quot;pin&quot; style=&quot;width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;comparison-chart&quot;&gt;Comparison chart&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Analog&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Digital&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Signal&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Analog signal is a continuous signal which represents physical measurements.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Digital signals are discrete time signals generated by digital modulation.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Waves&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Denoted by sine waves.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Denoted by square waves.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Representation&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Uses continuous range of values to represent information.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Uses discrete or discontinuous values to represent information.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Human voice in air, analog electronic devices.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Computers, CDs, DVDs, and other digital electronic devices.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Technology&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Analog technology records waveforms as they are.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Samples analog waveforms into a limited set of numbers and records them.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Data transmissions&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Subjected to deterioration by noise during transmission and write/read cycle.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Can be noise-immune without deterioration during transmission and write/read cycle.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Response to Noise&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;More likely to get affected reducing accuracy&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Less affected since noise response are analog in nature&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Analog hardware is not flexible.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Digital hardware is flexible in implementation.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Uses&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Can be used in analog devices only. Best suited for audio and video transmission.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Best suited for Computing and digital electronics.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Applications&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Thermometer&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;PCs, PDAs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Bandwidth&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Analog signal processing can be done in real time and consumes less bandwidth.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;There is no guarantee that digital signal processing can be done in real time and consumes more bandwidth to carry out the same information.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Memory&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Stored in the form of wave signal.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Stored in the form of binary bit.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Power&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Analog instrument draws large power.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Digital instrument drawS only negligible power.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Cost&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Low cost and portable.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Cost is high and not easily portable.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Impedance&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Low&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;High order of 100 megaohm&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;strong&gt;Errors&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Analog instruments usually have a scale which is cramped at lower end and give considerable observational errors.&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Digital instruments are free from observational errors like parallax and approximation errors.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;hardware-setup&quot;&gt;Hardware Setup&lt;/h2&gt;

&lt;p&gt;We start assembling the circuit as show in the diagram bellow. We will use two LEDs to test the output functionality (digital and PWM-Pulse-width Modulation), and a button to test the input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/pracise_1.png&quot; alt=&quot;pinboard&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the next table you will see which RPi’s pins we are suing:&lt;/p&gt;

&lt;h5 id=&quot;leds&quot;&gt;Leds&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Broadcom chip-specific numbers&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;P1 Pin Number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;GPIO 18&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;GPIO 23&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;16&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;button&quot;&gt;Button&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Broadcom chip-specific numbers&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;P1 Pin Number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;GPIO 17&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;11&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&quot;ground&quot;&gt;Ground&lt;/h5&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Broadcom chip-specific numbers&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;P1 Pin Number&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Ground&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;python-rpigpio-api-example&quot;&gt;Python (RPi.GPIO) API Example&lt;/h2&gt;

&lt;p&gt;We will use the &lt;strong&gt;RPi.GPIO module&lt;/strong&gt; as the driving force behind our Python examples. These Python files and source is included with Raspbian, so assuming you are running the latest Linux distribution, you do not need to download anything to get started. Let’s see an example:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;From your terminal in your laptop connect to your RPi.&lt;/li&gt;
  &lt;li&gt;Create a folder call “code”, then a file call “blinker.py”:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir code
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;code
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;touch blinker.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;Then we open it with our text editor:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;nano blinker.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Then, copy the next code in your text editor. This code assumes we have set up he circuit as we arranged above.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# External module imports GPIO&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RPi.GPIO&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GPIO&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Library to slow or give a rest to the script&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# Pin definiton using Broadcom scheme&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# PWM (Analog)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pwmPin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Broadcom pin 18 (P1 pin 12)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Led&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ledPin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Broadcom pin 23 (P1 pin 16)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Button&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;butPin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Broadcom pin 17 (P1 pin 11)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# duty cycle (0 i.e 0%/LOW and 100 ie.e 100%/HIGH) for PWM pin&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# Pin Setup:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Broadcom pin-numbering scheme&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ledPin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# LED pin set as output&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwmPin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# PWM pin set as output&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# PWM (Analog) Output&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pwm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pwmPin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Initialize PWM on pwmPin 100Hz frequency&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Button pin set as input w/ pull-up resistors&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;butPin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pull_up_down&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUD_UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# Initial state for LEDs:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ledPin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This function set an initial value of the frequency&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pwm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Here we go! Press CTRL+C to exit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# The input() function will return either a True or False&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# indicating whether the pin is HIGH or LOW.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;butPin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# button is released&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pwm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChangeDutyCycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Adjust the value of the PWM output&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ledPin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# button is pressed:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pwm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChangeDutyCycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ledPin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# Delay of 75 milliseconds&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.075&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ledPin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# Delay of 75 milliseconds&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.075&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# If CTRL+C is pressed, exit cleanly:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pwm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# stop PWM&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# cleanup all GPIO&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Running the script needs administrator privileges because the RPi.GPIO module requires it. So we run the following commands:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To make the script an executable:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo chmod u+x blinker.py
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./blinker.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;With the code running, press the button to turn on the digital LED. The PWM-ing LED will invert its brightness when you press the button as well.&lt;/p&gt;

&lt;h2 id=&quot;python-rpigpio-api-overview-of-the-basic-function-calls-used-in-our-example&quot;&gt;Python (RPi.GPIO) API: Overview of the basic function calls used in our example.&lt;/h2&gt;

&lt;h3 id=&quot;setup-section&quot;&gt;Setup Section&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;When we use python to control our GPIO pins, we always need to import the corresponding Python module, which goes at the top of the script:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;RPi.GPIO&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GPIO&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In here, we are giving a shorter name to the module “GPIO”, in order to call the module through our script.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is important to define which of the two &lt;strong&gt;pin-numbering schemes&lt;/strong&gt; you want to use:
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.BOARD&lt;/code&gt;– &lt;strong&gt;Board numbering scheme&lt;/strong&gt;. The pin numbers follow the &lt;strong&gt;pin numbers on header P1&lt;/strong&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.BCM&lt;/code&gt; – &lt;strong&gt;Broadcom chip-specific pin numbers&lt;/strong&gt;. These pin numbers follow the lower-level numbering system defined by the Raspberry Pi’s Broadcom-chip brain.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To specify in your code which number-system is being used, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.setmode()&lt;/code&gt; function as:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setmode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BCM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will activate the Broadcom-chip specific pin numbers.&lt;/p&gt;

&lt;h3 id=&quot;setting-a-pin-mode&quot;&gt;Setting a Pin Mode&lt;/h3&gt;

&lt;p&gt;You have to declare a “pin mode” before you can use it as either an input or output. To set a pin mode, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;setup([pin], [GPIO.IN, GPIO.OUT]&lt;/code&gt; function. So, if you want to set pin 18 (in the BCM) or 12 (in the BOARD) as an output, for example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;output&quot;&gt;Output&lt;/h3&gt;

&lt;h4 id=&quot;digital-output&quot;&gt;Digital Output&lt;/h4&gt;

&lt;p&gt;To write a pin high or low, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.output([pin], [GPIO.LOW, GPIO.HIGH])&lt;/code&gt; function. For example, if you want to set pin 18 (in the BCM) high:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIGH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Writing a pin to &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.HIGH&lt;/code&gt; will drive it to 3.3V, and &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.LOW&lt;/code&gt; will set it to 0V. For the lazy, alternative to &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.HIGH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.LOW&lt;/code&gt;, you can use either &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; to set a pin value.&lt;/p&gt;

&lt;h4 id=&quot;pulse-width-modulation-pwm-analog-output&quot;&gt;Pulse-width Modulation (PWM-“Analog”) Output&lt;/h4&gt;

&lt;p&gt;To initialize PWM, use &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.PWM([pin], [frequency])&lt;/code&gt; function. To make the rest of your script-writing easier you can assign that instance to a variable. Then use &lt;code class=&quot;highlighter-rouge&quot;&gt;pwm.start([duty cycle])&lt;/code&gt; function to set an initial value. For example, we can set PWM pin up with a frequency of 1kHz, and set that output to a 50% duty cycle:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pwm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PWM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pwm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To adjust the value of the PWM output, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;pwm.ChangeDutyCycle([duty cycle])&lt;/code&gt; function. &lt;code class=&quot;highlighter-rouge&quot;&gt;[duty cycle]&lt;/code&gt; can be any value between 0 (i.e 0%/LOW) and 100 (ie.e 100%/HIGH). So to set a pin to 75% on, for example, you could write:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pwm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ChangeDutyCycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To turn PWM on that pin off, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;pwm.stop()&lt;/code&gt; command. Just don’t forget to set the pin as an output before you use it for PWM.&lt;/p&gt;

&lt;h3 id=&quot;inputs&quot;&gt;Inputs&lt;/h3&gt;

&lt;p&gt;If a pin is configured as an input, you can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.input([pin])&lt;/code&gt; function to read its value. The &lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt; function will return either a &lt;code class=&quot;highlighter-rouge&quot;&gt;True&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt; indicating whether the pin is HIGH or LOW. You can use an if statement to test this. For example, in the next lines of code the GPIO library will read pin 17 (in the BCM) and print whether it is being read as HIGH or LOW:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pin 11 is HIGH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pin 11 is LOW&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;#### Pull-Up/Down Resistors&lt;/p&gt;

&lt;p&gt;In the the &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.setup()&lt;/code&gt; function, we saw above, where we declared whether a pin was an input or output, we can use a third parameter to set pull-up or pull-down resistors: &lt;code class=&quot;highlighter-rouge&quot;&gt;pull_up_down=GPIO.PUD_UP&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;pull_up_down=GPIO.PUD_DOWN&lt;/code&gt;. For example, to use a pull-up resistor on GPIO 17 (in the BCM), write this into your setup:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pull_up_down&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GPIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PUD_UP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If nothing is declared in that third value, both pull-resistors will be disabled.&lt;/p&gt;

&lt;h3 id=&quot;others&quot;&gt;Others&lt;/h3&gt;

&lt;h4 id=&quot;setting-up-delays&quot;&gt;Setting up delays&lt;/h4&gt;

&lt;p&gt;If you need to slow down your Python script, you can add delays by incorporating the &lt;a href=&quot;https://docs.python.org/2/library/time.html&quot;&gt;time module&lt;/a&gt; at the top of your script as:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;time&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;time.sleep([seconds])&lt;/code&gt; to give your script a rest. You can use decimals to precisely set your delay. For example, to delay 250 milliseconds, write:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;garbage-collecting&quot;&gt;Garbage Collecting&lt;/h3&gt;

&lt;p&gt;Once your script has run its course, be kind to the next process that might use your GPIOs by cleaning up after yourself. Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;GPIO.cleanup()&lt;/code&gt; command at the end of your script to release any resources your script may be using. Your RPi will survive if you forget to add this command, but it is good practice to include wherever you can.&lt;/p&gt;

&lt;h2 id=&quot;suggested-readings&quot;&gt;Suggested readings&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.sparkfun.com/tutorials/pulse-width-modulation&quot;&gt;Pulse-Width Modulation&lt;/a&gt; – You can use PWM to dim LEDs or send signals to servo motors. The RPi has a single PWM-capable pin.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.sparkfun.com/tutorials/light-emitting-diodes-leds&quot;&gt;Light-Emitting Diodes (LEDs)&lt;/a&gt; – To test the output capabilities of the Pi we will use some Leds.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.sparkfun.com/tutorials/switch-basics&quot;&gt;Switch Basics&lt;/a&gt; – To test inputs to the Pi, we will use buttons and switches.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.sparkfun.com/tutorials/pull-up-resistors&quot;&gt;Pull-Up Resistors&lt;/a&gt; – The Pi has internal pull-up (and pull-down) resistors. These are very handy when you are interfacing buttons with the little computer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;[&lt;a href=&quot;http://www.diffen.com/difference/Analog_vs_Digital&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://learn.sparkfun.com/tutorials/raspberry-gpio&quot;&gt;2&lt;/a&gt;]&lt;/p&gt;</content><author><name>Ariadna Blanca Romero &amp; Jing Sheng Pang</name></author><summary>Raspberry Pi GPIO-Part 1</summary></entry><entry><title>Cheat Sheet Bash Commands</title><link href="https://starignus.github.io/PythonPractise//PythonPractise//2016/10/19/BashCommands/" rel="alternate" type="text/html" title="Cheat Sheet Bash Commands" /><published>2016-10-19T13:00:00+01:00</published><updated>2016-10-19T13:00:00+01:00</updated><id>https://starignus.github.io/PythonPractise//PythonPractise//2016/10/19/BashCommands</id><content type="html" xml:base="https://starignus.github.io/PythonPractise//PythonPractise//2016/10/19/BashCommands/">&lt;h1 id=&quot;bash-script-linux-commands&quot;&gt;Bash Script (Linux commands)&lt;/h1&gt;

&lt;p&gt;Here you will see a summary of the common commands use in Linux (Unix) environment. We will just give examples of the ones we will use more frequently during the workshop. This commands can’t be used in Windows environment unless you use a &lt;a href=&quot;https://www.google.co.uk/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=2&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0ahUKEwi5tb-ijtPPAhWD7hoKHdyTA-IQFggmMAE&amp;amp;url=https%3A%2F%2Fwww.cygwin.com%2F&amp;amp;usg=AFQjCNHet6tpyafCXeYZCDWdFVdg2_A4IQ&amp;amp;sig2=jK-xBiPuohBaZkfcHhnHUw&quot;&gt;Linux emulator&lt;/a&gt;.
If you need information in the terminal about an specific Linux/Unix command you can type a command line on the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Bash&quot;&gt;$ man ls
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To escape from the manual, just type: &lt;em&gt;q&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;file-commands&quot;&gt;File Commands&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/File_commands.png&quot; alt=&quot;files&quot; style=&quot;width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples - working with directories:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls -al
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls -alrt
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir codes
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir temp temp1
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir -p temp2/ok
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat file.txt
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat file.txt file2.txt &amp;gt; fileOut.txt
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rm file.txt
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rm -r temp2/ok
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;rm -r temp2
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;df -h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;strong&gt;rm *&lt;/strong&gt; it is a dangerous command that should be use with care, you might lose all your work!!&lt;/p&gt;

&lt;h5 id=&quot;examples---create-a-file&quot;&gt;Examples - Create a File:&lt;/h5&gt;

&lt;p&gt;&lt;strong&gt;Method 1:&lt;/strong&gt; Using nano editor:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;nano file.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then you will get the screen editor where you can type in e.g. type &lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;Hello World!&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To save your changes and exit the editor type:
&lt;strong&gt;ctrl + x&lt;/strong&gt; and choose &lt;strong&gt;Yes&lt;/strong&gt; to save your changes.
&lt;strong&gt;Method 2:&lt;/strong&gt; Using &lt;strong&gt;cat&lt;/strong&gt; command.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat &amp;gt;file2.txt
&lt;span class=&quot;s2&quot;&gt;&quot;Hello Universe!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To exit press: &lt;strong&gt;ctrl + d”&lt;/strong&gt;.
### Directory&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Directory_access.png&quot; alt=&quot;Directory Access&quot; style=&quot;width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;disk-usage&quot;&gt;Disk usage&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Disk_usage.png&quot; alt=&quot;Disk_usage&quot; style=&quot;width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;file-transfer-and-remote-access&quot;&gt;File transfer and Remote Access&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Remote_access.png &quot; alt=&quot;Remote_access&quot; style=&quot;width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;search&quot;&gt;Search&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Search.png&quot; alt=&quot;Search&quot; style=&quot;width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;system&quot;&gt;System&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/System.png&quot; alt=&quot;System&quot; style=&quot;width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;process-related&quot;&gt;Process Related&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Process_related.png&quot; alt=&quot;Process_related&quot; style=&quot;width: 300px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;virtual-terminal-screen&quot;&gt;Virtual terminal (Screen)&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Screen command&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen -S name_of_terminal&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Assigning name to the virtual terminal or screen session.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen -ls&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;List all the virtual sessions or screens opened.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen -X -S name_of_terminal quit&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Kill an specific virtual terminal.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen -r name_of_terminal&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Attach to the virtual terminal or screen.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Press “Ctrl-A” and “d“&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Detach from virtual terminal  or screen.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Press “Ctrl-A” and “K”&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;This command will leave and kill the virtual terminal or screen&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Press “Ctrl-A” and “n“&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Switching to the next virtual terminal or screen.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Press “Ctrl-A” and “p“&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Switching to the previous virtual terminal or screen&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/drive/u/0/folders/0B_LZEs2baSXxb0FwcXRLeGRrV2c&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;</content><author><name>Ariadna Blanca Romero &amp; Jing Sheng Pang</name></author><summary>Bash Script (Linux commands)</summary></entry><entry><title>Introduction to Python</title><link href="https://starignus.github.io/PythonPractise//PythonPractise//2016/10/14/intro-python/" rel="alternate" type="text/html" title="Introduction to Python" /><published>2016-10-14T13:00:00+01:00</published><updated>2016-10-14T13:00:00+01:00</updated><id>https://starignus.github.io/PythonPractise//PythonPractise//2016/10/14/intro-python</id><content type="html" xml:base="https://starignus.github.io/PythonPractise//PythonPractise//2016/10/14/intro-python/">&lt;h1 id=&quot;introduction-to-python&quot;&gt;Introduction to Python&lt;/h1&gt;

&lt;h3 id=&quot;about-python-language&quot;&gt;About Python Language&lt;/h3&gt;

&lt;p&gt;Remember that you are intelligent, and you can learn, but the computer is simple and very fast, but can not learn by itself. Therefore, for you to communicate instructions on the computer, it is easier for you to learn a computer Language (e.g. Python) than for the computer to learn English.&lt;/p&gt;

&lt;p&gt;Python can be &lt;strong&gt;easy to pick up and friendly to learn&lt;/strong&gt;. &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; is a &lt;strong&gt;general-purpose&lt;/strong&gt; interpreted , interactive, object-oriented, and high-level programming language. It was created by Guido van Rossum during 1985- 1990. There are two main python versions: 2.7 and 3. For this course, we will use 2.7 since it is the most common or popular used.&lt;/p&gt;

&lt;h4 id=&quot;basic-practise&quot;&gt;Basic Practise&lt;/h4&gt;

&lt;p&gt;Let’s get familiar with Python by playing in the terminal in the interactive mode (you type a line at a time, and the interpreter responds). You invoke the interpreter and brings up the following prompt:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sep&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCC&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linux2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;copyright&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;credits&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;license&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Strings, integers, and floating points:
&lt;code class=&quot;highlighter-rouge&quot;&gt;python
&amp;gt;&amp;gt;&amp;gt; print &quot;Hello, Python!&quot;
&amp;gt;&amp;gt;&amp;gt; x = 1         # Integer assignment
&amp;gt;&amp;gt;&amp;gt; y = 1005.00   # Floating points
&amp;gt;&amp;gt;&amp;gt; name = &quot;John&quot; # A string
&amp;gt;&amp;gt;&amp;gt; print x
&amp;gt;&amp;gt;&amp;gt; print y
&amp;gt;&amp;gt;&amp;gt; print name
&lt;/code&gt;
In Python, the &lt;a href=&quot;https://en.wikibooks.org/wiki/Python_Programming/Basic_Math&quot;&gt;standard order of operations&lt;/a&gt; are evaluated from left to right following order (memorised by many as PEMDAS):&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Syntax&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;P&lt;/strong&gt;arentheses&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;( … )&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Happening before operating on anything else.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;E&lt;/strong&gt;xponents&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;**&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;An exponent is a simply short multiplication or division, it should be evaluated before them.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;M&lt;/strong&gt;ultiplication and &lt;strong&gt;D&lt;/strong&gt;ivision&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;* /&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Multiplication is rapid addition and must happen first.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;A&lt;/strong&gt;ddition and &lt;strong&gt;S&lt;/strong&gt;ubtraction&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;+ -&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: // is the floor division in which the digits after the decimal point are removed. But if one of the operands is negative, the result is floored, i.e., rounded away from zero.
&lt;code class=&quot;highlighter-rouge&quot;&gt;python
&amp;gt;&amp;gt;&amp;gt; 3/4 * 5  # First division and then Multiplication
&amp;gt;&amp;gt;&amp;gt; 3.0 / 4 * 5
&amp;gt;&amp;gt;&amp;gt; (3.0 / 4) * 4
&amp;gt;&amp;gt;&amp;gt; 2**8
&amp;gt;&amp;gt;&amp;gt; -11.0//3
&amp;gt;&amp;gt;&amp;gt; 11.0//3 # Result floored (rounded away from zero)
&amp;gt;&amp;gt;&amp;gt; -11.0/3  
&amp;gt;&amp;gt;&amp;gt; z = float(5)
&amp;gt;&amp;gt;&amp;gt; z
&amp;gt;&amp;gt;&amp;gt; z = int(5.25)
&amp;gt;&amp;gt;&amp;gt; z
&amp;gt;&amp;gt;&amp;gt; 10%7 # Remainder of a division
&amp;gt;&amp;gt;&amp;gt; 'abc' + 'fgb' # strings
&lt;/code&gt;
Comparison operators:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Name&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Syntax&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Less than&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Greater than&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;lt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Less than or equal to&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&amp;gt;=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Greater than or equal to&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;==&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Equal to&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;!=&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Not equal to&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;  
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# We got a boolean&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aa&quot;&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;##### Data Types&lt;/p&gt;

&lt;p&gt;The data stored in memory can be of different types; Python has five: &lt;strong&gt;Numbers, Strings, List, Tuple, and Dictionary&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# numbers&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Strings&lt;/strong&gt; in Python are a set of characters represented by the quotation marks. Python allows for either pair of single or double quotes.&lt;/p&gt;

&lt;p&gt;Subsets of strings can be taken using the slice operator ([] and [:] ) with indexes starting at 0 at the beginning of the string and working their way from -1 to the end.&lt;/p&gt;

&lt;p&gt;The plus (+) sign is the string concatenation operator, and the asterisk (*) is the repetition operator. For example:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World!'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;# Prints complete string&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# Prints first character of the string&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# Prints characters starting from 3rd to 5th&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# Prints string starting from 3rd character&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# Prints string two times&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TEST&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Prints concatenated string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Lists&lt;/strong&gt; are the most versatile data types in Python. A list contains items separated by commas and enclosed in square brackets ([])—similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type.&lt;/p&gt;

&lt;p&gt;The values stored in a list can be accessed using the slice operator ([] and [:]) with indexes starting at 0 at the beginning of the list and working their way to ending -1. The plus (+) sign is the list concatenation operator, and the asterisk (*) is the repetition operator.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;786&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'john'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;70.2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tinylist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'john'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;# Prints complete list&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# Prints first element of the list&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# Prints elements starting from 2nd till 3rd&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# Prints elements starting from 3rd element&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tinylist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Prints list two times&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tinylist&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Prints concatenated lists&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A &lt;strong&gt;tuple&lt;/strong&gt; is another sequence data type that is similar to the list. It consists of some values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.&lt;/p&gt;

&lt;p&gt;The main differences between lists and tuples are: Lists are enclosed in brackets ( [] ), and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated—&lt;strong&gt;immutable&lt;/strong&gt;. Tuples can be thought of as read-only lists.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;786&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'john'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;70.2&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tinytuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'john'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# Prints complete list&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# Prints first element of the list&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# Prints elements starting from 2nd till 3rd&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# Prints elements starting from 3rd element&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tinytuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# Prints list two times&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tinytuple&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Prints concatenated lists&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Invalid operations on a tuple but valid on a list:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;786&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'john'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;70.2&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;786&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'john'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;70.2&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# Invalid syntax with tuple&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# Valid syntax with list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Python’s &lt;strong&gt;dictionaries&lt;/strong&gt; are hash table type. They work like associative arrays and consist of key-value pairs. A dictionary key can be almost any Python type but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.
Dictionaries are enclosed by curly braces ({}), and values can be assigned and accessed using square braces ([]).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'one'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is one&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is two&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# keys are: name, code and dept; values are: john, 6734 and sales&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tinydict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'john'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'code'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6734&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'dept'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sales'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'one'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;# Prints value for 'one' key&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# Prints value for 2 key&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tinydict&lt;/span&gt;          &lt;span class=&quot;c&quot;&gt;# Prints complete dictionary&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tinydict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# Prints all the keys&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tinydict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Prints all the values&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To quit the Python interpreter:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;scripts&quot;&gt;Scripts&lt;/h5&gt;

&lt;p&gt;A Script is a sequence of statements (lines) into a file using a text editor and tells Python interpreter to execute the statements in the file.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can write a program in our script like a recipe or installation of software. At the end of the day, a program is a &lt;strong&gt;sequence&lt;/strong&gt; of steps to be done in order.&lt;/li&gt;
  &lt;li&gt;Some of the steps can be &lt;strong&gt;conditional&lt;/strong&gt;, that means that sometimes they can be skipped.&lt;/li&gt;
  &lt;li&gt;Sometimes a step or group of steps are to be &lt;strong&gt;repeated&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Sometimes we store a set of steps that will be used over and over again in several parts of the program (&lt;strong&gt;functions&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Have a look on the code &lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#indentation&quot;&gt;style guide&lt;/a&gt; for a good coding practise. As a fist good practise, do not name files or folders with space in between: Auful! –&amp;gt; example 1.py; Great! –&amp;gt; &lt;strong&gt;example_1.py, exampleOne.py, example_one.py&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We will make a simple script:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;/home/pi
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mkdir codes/python_examples
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;codes/python_examples
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;nano example_fllow.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then you can type in the editor:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When a program is running, it flows from one step to the next.  As programmers, we set up “paths” for the program to follow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Flow_1.png&quot; alt=&quot;flow&quot; style=&quot;width: 200px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Close the text editor and then you can execute it on two ways:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python example_fllow.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The other is to give the script the access permissions to be an executable file through the &lt;a href=&quot;https://en.wikipedia.org/wiki/Chmod&quot;&gt;chomod&lt;/a&gt; Linux command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod u+x example_fllow.py
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./example_fllow.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s do an example where we have a &lt;strong&gt;conditional&lt;/strong&gt; that implies a decision-making about a situation. Decision making is the anticipation of conditions occurring while execution of the program and specifying actions taken according to the conditions. The following diagram illustrates the conditional:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/decision_making.jpg&quot; alt=&quot;decision&quot; style=&quot;width: 200px;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;nano example_conditional.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now let’s add the code:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Smaller'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Bigger'&lt;/span&gt;          
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Finis'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#outside conditional&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod u+x example_conditional.py
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./example_conditional.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Flow of the code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Flow_Conditional.png&quot; alt=&quot;conditional&quot; style=&quot;width: 200px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;loop statement&lt;/strong&gt; allows us to execute a statement or group of statements multiple times.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/loop_architecture.jpg&quot; alt=&quot;loop&quot; style=&quot;width: 200px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;While loop&lt;/strong&gt; repeats a statement or group of statements while a given condition is &lt;em&gt;TRUE&lt;/em&gt;. It tests the condition before executing the loop body.&lt;/p&gt;

&lt;p&gt;Now let’s add the code to ur script called &lt;em&gt;example_while_loop.py&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Blastoff!'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#outside loop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Before running, remember to give the permissions:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod u+x example_while_loop.py
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./example_while_loop.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Flow of the code:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/while_loop.png&quot; alt=&quot;while&quot; style=&quot;width: 200px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Loops (repeated steps) ha‰ve &lt;em&gt;iteration variables&lt;/em&gt; that change each time through a loop (like &lt;em&gt;n&lt;/em&gt;).  Often these &lt;em&gt;iteration variables&lt;/em&gt; go through a sequence of numbers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For loop&lt;/strong&gt; executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.&lt;/p&gt;

&lt;p&gt;Now let’s add the code to our script called &lt;em&gt;example_for_loop.py&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Area of a circle = pi * r**2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Library Numpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area_circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Function that calculates the area of a circle'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# List are called interables&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area_circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The area of a circle of radius &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cm is&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cm^2&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Finished to calculate the areas of circles&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod u+x example_function_circle_area.py
&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/example_function_circle_area.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can see that we get the same result but it is more organise and we can use the function in other section of our code.&lt;/p&gt;

&lt;p&gt;Now let’s ask the user to provide a list:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;nano example_function_circle_area_user_1.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Area of a circle = pi * r**2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Library Numpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Library to Safely evaluate an expression node&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# or a string containing a Python expression&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ast&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# List are called interables&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;list_raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;raw_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Provide a list of radius in cm like &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[3, 2, 12, 6]: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;literal_eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area_circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Function that calculates the area of a circle'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area_circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The area of a circle of radius &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cm is&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cm^2&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Finished to calculate the areas of circles&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod u+x example_function_circle_area_user_1.py
&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/example_function_circle_area_user_1.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If we do not use the &lt;a href=&quot;https://docs.python.org/2/library/ast.html&quot;&gt;ast library&lt;/a&gt; to evaluate a string containing a Python expression (in this case a list), we will get an error since Python will interpret as a string type and not a list type.&lt;/p&gt;

&lt;p&gt;A second way to do it is by using the &lt;a href=&quot;https://docs.python.org/2/library/sys.html&quot;&gt;sys module&lt;/a&gt; which provides access to some variables used or maintained by the interpreter and to functions that interact strongly with the interpreter.&lt;/p&gt;

&lt;p&gt;Now let’s ask the user to provide a list by passing the strings directly:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;nano example_function_circle_area_user_2.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Usage instructions:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ./example_function_circle_area_user_2.py &quot;[1, 2, 3]&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Area of a circle = pi * r**2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Library Numpy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Library to Safely evaluate an expression node&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# or a string containing a Python expression&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ast&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Module provides access to some variables&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# used or maintained by the interpreter&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;list_raw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;literal_eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;area_circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Function that calculates the area of a circle'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area_circle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The area of a circle of radius &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cm is&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cm^2&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Finished to calculate the areas of circles&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;``` bash
$ chmod u+x example_function_circle_area_user_1.py
$./example_function_circle_area_user_2.py “[1, 2, 3]”&lt;/p&gt;

&lt;p&gt;You can download the pdf version &lt;a href=&quot;https://github.com/Starignus/PythonPractise/raw/master/Week1/Python/Python_week1.pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;References [ &lt;a href=&quot;https://www.tutorialspoint.com/python/&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://www.coursera.org/learn/python&quot;&gt;Charles Severance course: Python for everybody&lt;/a&gt;]&lt;/p&gt;</content><author><name>Ariadna Blanca Romero &amp; Jing Sheng Pang</name></author><summary>Introduction to Python</summary></entry><entry><title>Setting your Raspberry Pi at Imperial College</title><link href="https://starignus.github.io/PythonPractise//PythonPractise//2016/10/14/RPisetup/" rel="alternate" type="text/html" title="Setting your Raspberry Pi at Imperial College" /><published>2016-10-14T12:00:00+01:00</published><updated>2016-10-14T12:00:00+01:00</updated><id>https://starignus.github.io/PythonPractise//PythonPractise//2016/10/14/RPisetup</id><content type="html" xml:base="https://starignus.github.io/PythonPractise//PythonPractise//2016/10/14/RPisetup/">&lt;h1 id=&quot;setting-up-your-raspberry-pi-3-model-b&quot;&gt;Setting up your Raspberry Pi 3 Model B&lt;/h1&gt;

&lt;h3 id=&quot;starting-set-up&quot;&gt;Starting Set up&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Each team should get a monitor, keyboard and mouse.&lt;/li&gt;
  &lt;li&gt;Insert the mini SD card in the Raspberry Pi , connect the mouse and keyboard in the USB ports, and the display with provided HDMI-DVI cable. Then,  using Y-cable, power it up by plugging in the charger.&lt;/li&gt;
  &lt;li&gt;The operative system starts. Then, click on the &lt;strong&gt;terminal&lt;/strong&gt; icon next to the menu to open it.&lt;/li&gt;
  &lt;li&gt;Then you need to run some commands on it as root user to configure the Raspberry Pi (RPi). The &lt;strong&gt;root user&lt;/strong&gt; has the permission to modify files or default settings as administrator providing the root password. The &lt;strong&gt;root user&lt;/strong&gt; is &lt;strong&gt;pi&lt;/strong&gt; and the default &lt;strong&gt;root password&lt;/strong&gt; is &lt;strong&gt;raspberry&lt;/strong&gt;. First we will make stronger the password, but first we will change some default set ups:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo raspi-config
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To execute any Linux command as root user, the &lt;em&gt;sudo&lt;/em&gt; command presides the Linux command.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The terminal will show a menu which can be navigated with the arrows on your keyboard and accept options with enter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/raspi_config.png&quot; alt=&quot;screen&quot; style=&quot;width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;!---![My helpful screenshot](https://starignus.github.io/PythonPractise//assets/raspi_config.png) --&gt;

&lt;ul&gt;
  &lt;li&gt;Then we set up the keyboard to prevent any problem when changing the password, therefore we access the option: &lt;strong&gt;Internationalisation Options –&amp;gt; Change the Keyboard Layout&lt;/strong&gt;. Then we choose generic 105 key, and then UK.&lt;/li&gt;
  &lt;li&gt;Also we have option to change the timezone from this menu.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Internationalisation.png&quot; alt=&quot;screen&quot; style=&quot;width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To change the password, we return to the main menu and choose the second option. We have to set the new password and do not reboot the RPi yet.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We check that the &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Shell&quot;&gt;ssh&lt;/a&gt; for remote network communications is enabled (security shell cryptographic network protocol). We access to the &lt;strong&gt;Advance Options –&amp;gt; SSH&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/advance_opt.png&quot; alt=&quot;screen&quot; style=&quot;width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An optional step is to change the hostname in the same advance menu.&lt;/li&gt;
  &lt;li&gt;Then we restart the RPi.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;setting-wifi-from-imperial-college-network&quot;&gt;Setting WiFi from Imperial College network&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;You will see there is no IP assigned to our PRI, therefore to set up the WiFi we need to modify a configuration file, but first we need to back it up:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo cp /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant.conf_backup
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then we will edit the &lt;em&gt;wpa_supplicant.conf&lt;/em&gt;:
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
$ sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/code&gt;
The default text editor installed in the RPi is &lt;em&gt;nano&lt;/em&gt;. We can install also &lt;em&gt;vim&lt;/em&gt; or &lt;em&gt;vi&lt;/em&gt; to have another option of a text editor.&lt;/p&gt;

&lt;p&gt;This file should just have the next line at the beginning:
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then we add to the content of &lt;em&gt;wpa_supplicant.conf&lt;/em&gt; the lines after # IC (&lt;strong&gt;the configuration is case sensitive, so make sure you do not have typos&lt;/strong&gt;):&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ctrl_interface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/run/wpa_supplicant &lt;span class=&quot;nv&quot;&gt;GROUP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;netdev
&lt;span class=&quot;nv&quot;&gt;update_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1


&lt;span class=&quot;c&quot;&gt;# IC&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Imperial-WPA&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;RSN
        &lt;span class=&quot;nv&quot;&gt;key_mgmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;WPA-EAP
        &lt;span class=&quot;nv&quot;&gt;pairwise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CCMP
        &lt;span class=&quot;nv&quot;&gt;auth_alg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;OPEN
        &lt;span class=&quot;nv&quot;&gt;eap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;PEAP
        &lt;span class=&quot;nv&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ic&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;OLLEGE_USERNAME&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;YOUR_PASSWORD&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is the Imperial College configuration in which you have to replace “COLLEGE_USERNAME” with a valid college username, please do not store your password in plain text, but we will change it after verifying that the WiFi is working. Reboot the system if it is necessary.
&lt;strong&gt;Note:&lt;/strong&gt; In case you are working with your team, and you do not want to show your password, just leave the field blank and follow the next steeps to encrypt your password before setting it up in the &lt;em&gt;wpa_supplicant.conf&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encrypting Password&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to not store the password in a plain text we &lt;strong&gt;encrypt&lt;/strong&gt; our password with an &lt;strong&gt;MD4 hash generated&lt;/strong&gt; from the corresponding college password. You can generate the hash like this with the next Linux command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;s1&quot;&gt;'YOUR_PASSWORD'&lt;/span&gt; | iconv -t utf16le | openssl md4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This command will display the encrypted password on your terminal like:
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
$ (stdin)= a6c71eedc2eacbca84003336a4a62a1c
&lt;/code&gt;
Then you can copy the string that was generated in your terminal screen similar to the one of the example above: a6c71eedc2eacbca84003336a4a62a1c.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Also you can save the hash from your password in a file and then read its content:
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
$ echo -n 'YOUR_PASSWORD' | iconv -t utf16le | openssl md4 &amp;gt; hash.txt
$ cat hash.txt
&lt;/code&gt;
The &lt;em&gt;cat&lt;/em&gt; command is used to read and concatenate files.&lt;/p&gt;

&lt;p&gt;Then open the &lt;em&gt;wpa_supplicant.conf&lt;/em&gt; to add the hashed password you generate:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In the password field replace “YOUR_PASSWORD” with the string you generated as hexadecimal characters, and we add the ‘hash:’-prefix) in the similar fashion as in the example bellow:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# IC&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;network&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;ssid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Imperial-WPA&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;RSN
        &lt;span class=&quot;nv&quot;&gt;key_mgmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;WPA-EAP
        &lt;span class=&quot;nv&quot;&gt;pairwise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;CCMP
        &lt;span class=&quot;nv&quot;&gt;auth_alg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;OPEN
        &lt;span class=&quot;nv&quot;&gt;eap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;PEAP
        &lt;span class=&quot;nv&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ic&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\C&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;OLLEGE_USERNAME&quot;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;:a6c71eedc2eacbca84003336a4a62a1c
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A last security step to do is to remove the bash history, with all the commands we had typed on the terminal. Therefore, we do it like:
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
$ history -w
$ history -c
&lt;/code&gt;
Then we reboot again the RPi to check that the password was properly set up.&lt;/p&gt;

&lt;h3 id=&quot;installing-python&quot;&gt;Installing Python&lt;/h3&gt;

&lt;p&gt;To install Linux packages in our system we must use the command: &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install name_of_package&lt;/code&gt;. The installation could take some minutes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updating operative system&lt;/strong&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
sudo apt-get update
&lt;/code&gt;
&lt;strong&gt;Installing C lib needed by Python:&lt;/strong&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
sudo apt-get -y install libffi-dev
sudo apt-get -y install libssl-dev
&lt;/code&gt;
&lt;strong&gt;Installing Python:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get -y install build-essential python-dev python-openssl
sudo apt-get -y install python-setuptools
sudo apt-get -y remove --purge python-pip
sudo apt-get -y install python-pip
sudo pip install --upgrade pip
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Installing other text editor:&lt;/strong&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
sudo apt-get -y install vim
&lt;/code&gt;
### Remote connection to your Raspberry Pi
&lt;strong&gt;Weaved&lt;/strong&gt; services connect you easily and securely to your Pi from a mobile app, browser window and a terminal. Control remote computers using tcp hosts such as SSH. You will be able to connect to your RPi from laptop or desktop at home. The free weaved account allows for 10 registered services and 30 minute connections on up to 1 concurrent service(s).&lt;/p&gt;

&lt;h5 id=&quot;installing-weaved&quot;&gt;Installing weaved:&lt;/h5&gt;
&lt;p&gt;Manage network devices remotely using &lt;a href=&quot;http://www.weaved.com/&quot;&gt;weaved&lt;/a&gt; service. To install:
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
sudo apt-get -y install weavedconnectd
&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;weaved-configuration&quot;&gt;Weaved configuration:&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;To configure weaved in our RPi, first we need to open an account in &lt;a href=&quot;http://www.weaved.com/&quot;&gt;weaved&lt;/a&gt; website. You can register from your laptop or desktop. Once you have it, from your Rpi terminal you will execute a command to link your RPi to your weaved account:
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
sudo weavedinstaller
&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Enter your Weaved account username and password. Next, you will see this menu:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Pi-installer-menu.png&quot; alt=&quot;menu1&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initially you won’t have any Weaved services installed, so the upper part is empty.  Enter &lt;strong&gt;1&lt;/strong&gt; to attach Weaved to an existing TCP service (host) on your Raspberry Pi.  You should now see the following screen:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Pi-installer-menu-02.png&quot; alt=&quot;menu2&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter &lt;strong&gt;1&lt;/strong&gt; for SSH.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Next, we accept the default port (&lt;strong&gt;y&lt;/strong&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Pi-installer-menu-03.png&quot; alt=&quot;menu3&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The installer confirms your choice and asks you to give this connection a name (you can make it up, but remember to make a name easy for you to identify a specific RPi in case you have more than one attached to the weaved service.):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Pi-installer-menu-04.png&quot; alt=&quot;menu4&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will now return to the main menu, where you can see your Weaved Service Connection installed, then enter &lt;strong&gt;3&lt;/strong&gt; to exit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Pi-installer-menu-051.png&quot; alt=&quot;menu5&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;accessing-from-your-computer-linux-or-mac-os-x&quot;&gt;Accessing from your computer (Linux or Mac OS X)&lt;/h3&gt;

&lt;p&gt;We sill see here how you can access using your laptop or any other desktop from any terminal. First, if you login to your weaved account,  you will get a list of the services linked to your devices:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/weaved_connected.png&quot; alt=&quot;weaved&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In your case you will have just one item with a Type SSH as in the first line at the screen shoot above. When you click on the name of you device, your browser will open and show you a widow like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/weaved_ssh.png&quot; alt=&quot;weaved&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we copy the command after &lt;em&gt;For pi username&lt;/em&gt;, in this example it is: &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh -l pi proxy71.weaved.com -p 34644&lt;/code&gt;. For you it will be different. Then, paste the command in your laptop or desktop terminal (If you are using a Mac or Linux all will work, but for windows you have to &lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/putty/&quot;&gt;install a SSH and Telnet client&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Then, you are connected from your laptop to your RPi!! You don’t need the display and mouse anymore!&lt;/p&gt;

&lt;h3 id=&quot;accessing-from-your-computer-windows&quot;&gt;Accessing from your computer (Windows)&lt;/h3&gt;

&lt;p&gt;If your computer operative  system is Windows, to access remotely you will need to install PuTTY, which  is a free implementation of SSH and Telnet for Windows and Unix platforms. To download it click &lt;a href=&quot;http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Putty.JPG&quot; alt=&quot;weaved&quot; style=&quot;width: 700px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once downloaded, double click on the &lt;strong&gt;putty.exe&lt;/strong&gt; and you will see the window looks like below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/PuttyConnect.JPG&quot; alt=&quot;weaved&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, if you login to your weaved account,  you will get a list of the services linked to your devices:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/weaved_connected.png&quot; alt=&quot;weaved&quot; style=&quot;width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In your case you will have just one item with a Type SSH as in the first line at the screen shoot above. When you click on the name of you device, your browser will open and show you a widow like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/weaved_ssh.png&quot; alt=&quot;weaved&quot; style=&quot;width: 500px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Insert the server address and port obtained from Weaved.com into Putty and connect!&lt;/p&gt;

&lt;p&gt;When asked for username and password, please use your RPi username and password to log-in. (Please note, this is not weaved username and password).&lt;/p&gt;

&lt;p&gt;To exit your putty session, type “exit” and enter.&lt;/p&gt;

&lt;h3 id=&quot;virtual-terminal&quot;&gt;Virtual terminal&lt;/h3&gt;

&lt;p&gt;Remember you can just be connected during 30 minutes using &lt;strong&gt;weaved&lt;/strong&gt;, after that time you have to connect again to your account and do the same procedure we explained in the previous section. Therefore we will show you how a &lt;em&gt;virtual terminal&lt;/em&gt; can help you when you are working on your RPi.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Screen&lt;/strong&gt; is a full-screen software program allows you to use multiple windows (virtual VT100 terminals) in Unix. It offers a user to open several separate terminal instances inside a one single terminal window manager.&lt;/p&gt;

&lt;p&gt;The screen application is very useful, if you are dealing with multiple programs from a command line interface and for separating programs from the terminal shell. It also allows you to share your sessions with others users and detach/attach terminal sessions.&lt;/p&gt;

&lt;h4 id=&quot;when-to-use-screen&quot;&gt;When to use screen?&lt;/h4&gt;

&lt;p&gt;One of the advantages of &lt;em&gt;Screen&lt;/em&gt;, is that you can detach it. Then, you can restore it without losing anything you have done on the &lt;em&gt;Screen&lt;/em&gt;. One of the typical scenario where &lt;em&gt;Screen&lt;/em&gt; is of great help is when you are in the middle of SSH session and you want to download a file, update the operative, or transfer a big file to your RPi. The process could be 2 hours long. If you disconnect the SSH session, or suddenly the connection lost by accident, then the download process will stop. You have to start from the beginning again. To avoid that, we can use screen and detach it.&lt;/p&gt;

&lt;h4 id=&quot;installing-screen&quot;&gt;Installing screen&lt;/h4&gt;
&lt;p&gt;The screen program allows you to use multiple windows (virtual VT100 terminals) in Unix. If your local computer crashes, or you are connected remotely and lose the connection, the processes or login sessions you establish through screen don’t get lost.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get -y install screen
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;some-examples-to-use-screen&quot;&gt;Some Examples to use screen&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;When you are in your terminal, you can create a &lt;em&gt;screen&lt;/em&gt; or virtual terminal e.g. we will name the screen &lt;em&gt;mysession&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Screen_terminal.png&quot; alt=&quot;screen1&quot; style=&quot;width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Then you will be automatically attached to your screen or virtual terminal, that from now on we will call just &lt;em&gt;screen&lt;/em&gt;. You can execute now commands and work in the terminal:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Screen_new_attached.png&quot; alt=&quot;screen2&quot; style=&quot;width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can detach from the &lt;em&gt;screen&lt;/em&gt; by pressing “Ctrl-A” and “d“. Then we will go to our terminal outside the &lt;em&gt;screen&lt;/em&gt; session. Then we can check the list of &lt;em&gt;screens&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Screen_list.png&quot; alt=&quot;screen3&quot; style=&quot;width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We get the list and the screen ID. If we want to attach to a particular &lt;em&gt;screen&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://starignus.github.io/PythonPractise//assets/Screen_attaching.png&quot; alt=&quot;screen4&quot; style=&quot;width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;basic-commands-to-work-with-the-virtual-terminals&quot;&gt;Basic commands to work with the virtual terminals&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Screen command&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen -S name_of_terminal&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Assigning name to the virtual terminal or screen session.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen -ls&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;List all the virtual sessions or screens opened.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen -X -S name_of_terminal quit&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Kill an specific virtual terminal.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;screen -r name_of_terminal&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Attach to the virtual terminal or screen.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Press “Ctrl-A” and “d“&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Detach from virtual terminal  or screen.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Press “Ctrl-A” and “K”&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;This command will leave and kill the virtual terminal or screen&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Press “Ctrl-A” and “n“&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Switching to the next virtual terminal or screen.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Press “Ctrl-A” and “p“&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Switching to the previous virtual terminal or screen&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For more examples go to the &lt;a href=&quot;http://www.tecmint.com/screen-command-examples-to-manage-linux-terminals/&quot;&gt;link&lt;/a&gt; or ask the instructors.&lt;/p&gt;

&lt;p&gt;To know more about more advance details of how connect remotely go to the &lt;a href=&quot;Advance_remoteconection.md&quot;&gt;advance guide&lt;/a&gt;:&lt;/p&gt;

&lt;h2 id=&quot;some-useful-tips-and-troubleshooting-guides&quot;&gt;Some useful tips and troubleshooting guides&lt;/h2&gt;

&lt;h3 id=&quot;backup-rpi-image&quot;&gt;Backup RPi Image&lt;/h3&gt;

&lt;p&gt;It is useful and advisable to backup a working copy of your RPi image. For example, make a backup copy after setting up WiFi and update the library, the next time the wifi is not working, you can reformat the SD card and reinsert this backup copy to revert back to previous version. After this, your RPI get to connect back to WiFi right away like before. Here are the steps:&lt;/p&gt;

&lt;h5 id=&quot;for-windows-and-mac-os&quot;&gt;For Windows and Mac OS&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Download Win 32 Disk Imager if none installed on your computer &lt;a href=&quot;https://sourceforge.net/projects/win32diskimager/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Insert the SDCard into your computer (e.g. via card reader or SD card slot if your computer has one).&lt;/li&gt;
  &lt;li&gt;Open Win 32 Disk Imager. Select a location and give a file name for the backup image.&lt;/li&gt;
  &lt;li&gt;Select the right drive.&lt;/li&gt;
  &lt;li&gt;Click Read.&lt;/li&gt;
  &lt;li&gt;Once done, keep this backup copy safe. Please note that the size of the backup is the same size of your SD Card. SO please be mindful that it will take a considerable amount of disk space.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;for-replacing-the-image-on-the-sd-card&quot;&gt;For replacing the image on the SD Card&lt;/h3&gt;

&lt;h5 id=&quot;for-windows-and-mac-os-1&quot;&gt;For Windows and Mac OS&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;Download SDFormatter if none installed &lt;a href=&quot;https://www.sdcard.org/downloads/formatter_4/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Download Win 32 Disk Imager if none installed &lt;a href=&quot;https://sourceforge.net/projects/win32diskimager/&quot;&gt;here&lt;/a&gt; or Etcher For Mac &lt;a href=&quot;https://www.etcher.io&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Use SDFormatter to format the SD card. Please be careful and make sure you select the correct drive letter.&lt;/li&gt;
  &lt;li&gt;Use Win 32 Disk Imager or Etcher to re-image the backed up image into the SD card. I.e. select the file name, the drive letter of the SD card, and then click Write. Please be careful that the correct drive letter is selected. If you wish to install a fresh Raspbian OS, you can download it &lt;a href=&quot;www.raspberrypi.org&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Once this is done, a new image has been rewritten on your SD Card!&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Ariadna Blanca Romero &amp; Jing Sheng Pang</name></author><summary>Setting up your Raspberry Pi 3 Model B</summary></entry></feed>
